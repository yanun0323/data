// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rle_test

import (
	"testing"

	"github.com/yanun0323/data/icns/internal/rle"

	"github.com/google/go-cmp/cmp"
)

func TestStableRLE(t *testing.T) {
	data := []struct {
		name     string
		dec, enc []byte
	}{
		{
			"empty",
			nil,
			nil,
		},
		{
			"small",
			[]byte{
				0x01,
				0x02, 0x02,
				0x03, 0x03, 0x03,
				0x04, 0x04, 0x04, 0x04,
				0x05, 0x05, 0x05, 0x05, 0x05,
			},
			[]byte{
				0x02, 0x01, 0x02, 0x02, // 1, 2, 2
				0x80, 0x03, // 3* 3
				0x81, 0x04, // 4* 4
				0x82, 0x05, // 5* 5
			},
		},
		{
			"zeros overload",
			make([]byte, 300),
			[]byte{
				0xff, 0x00, // 130* 0
				0xff, 0x00, // 130* 0
				0xa5, 0x00, // 40* 0
			},
		},
		{
			"non repetitive",
			[]byte{ // non-repetitive sequence of 130 bytes
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
			},
			[]byte{
				0x7f, // maximal raw sequence of 128 bytes
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
				0x01, // remaining 2 bytes
				0x08, 0x09,
			},
		},
	}

	for _, tt := range data {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			decoded := rle.Decode(tt.enc)
			if diff := cmp.Diff(tt.dec, decoded); diff != "" {
				t.Errorf("Decode() mismatch (-want +got):\n%s", diff)
			}

			encoded := rle.Encode(tt.dec)
			if diff := cmp.Diff(tt.enc, encoded); diff != "" {
				t.Errorf("Encode() mismatch (-want +got):\n%s", diff)
			}
		})
	}
}

func TestUnstableRLE(t *testing.T) {
	data := []struct {
		name       string
		enc1, enc2 []byte
	}{
		{
			"small",
			[]byte{
				0x02, 0x01, 0x02, 0x02, // 1, 2, 2
				0x80, 0x03, // 3* 3
				0x80, 0x04, // 3* 4
				0x02, 0x04, 0x05, 0x05, // 4, 5, 5
				0x80, 0x05, // 3* 5
			},
			[]byte{
				0x02, 0x01, 0x02, 0x02, // 1, 2, 2
				0x80, 0x03, // 3* 3
				0x81, 0x04, // 4* 4
				0x82, 0x05, // 5* 5
			},
		},
	}

	for _, tt := range data {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			decoded := rle.Decode(tt.enc1)
			encoded := rle.Encode(decoded)
			if diff := cmp.Diff(tt.enc2, encoded); diff != "" {
				t.Errorf("Encode() mismatch (-want +got):\n%s", diff)
			}
		})
	}
}
