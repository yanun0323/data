package main

import (
	"errors"
	"sync"
	"sync/atomic"
	"time"

	"github.com/gorilla/websocket"
	"github.com/yanun0323/pkg/logs"
)

var (
	ErrWebSocketConnectionClosed = errors.New("websocket is closed")
)

type Client interface {
	Close() error
	ReadJSON(v interface{}) error
	ReadMessage() (messageType int, p []byte, err error)
	WriteJSON(v interface{}) error
	WriteMessage(messageType int, data []byte) error
}

type WSClient struct {
	url            string
	conn           *websocket.Conn
	mu             sync.Mutex
	isConnected    bool
	reconnectChan  chan struct{}
	stopChan       chan struct{}
	messageHandler func([]byte)
	running        atomic.Bool    // 使用原子操作確保安全檢查
	wg             sync.WaitGroup // 用於等待 goroutine 完成
}

func NewWSClient(url string, messageHandler func([]byte)) Client {
	return &WSClient{
		url:            url,
		isConnected:    false,
		reconnectChan:  make(chan struct{}, 1),
		stopChan:       make(chan struct{}),
		messageHandler: messageHandler,
	}
}

func (c *WSClient) Start() bool {
	// 如果已經在運行，則不重複啟動
	if c.running.Swap(true) {
		logs.Debug("WebSocket client 已經在運行中")
		return false
	}

	// 重置 stopChan (如果之前被關閉)
	select {
	case <-c.stopChan:
		c.stopChan = make(chan struct{})
	default:
	}

	c.wg.Add(1)
	go func() {
		defer c.wg.Done()
		c.reconnectLoop()
	}()

	// 觸發第一次連接
	c.reconnectChan <- struct{}{}
	return true
}

func (c *WSClient) Close() error {
	// 如果沒有運行，則直接返回
	if !c.running.CompareAndSwap(true, false) {
		return nil
	}

	logs.Debug("正在停止 WebSocket client...")
	close(c.stopChan)
	c.disconnect()

	// 等待 reconnectLoop goroutine 完成
	c.wg.Wait()
	logs.Debug("WebSocket client 已停止")
	return nil
}

func (c *WSClient) reconnectLoop() {
	backoff := 1 * time.Second
	maxBackoff := 60 * time.Second

	for {
		select {
		case <-c.stopChan:
			return
		case <-c.reconnectChan:
			if c.isConnected {
				continue
			}

			err := c.connect()
			if err != nil {
				logs.Debug("連接失敗: %v, 將在 %v 後重試", err, backoff)

				// 使用帶有超時的 select，以便能夠響應停止信號
				select {
				case <-time.After(backoff):
				case <-c.stopChan:
					return
				}

				backoff = time.Duration(min(backoff.Seconds()*2, maxBackoff.Seconds())) * time.Second

				// 檢查是否已停止
				select {
				case <-c.stopChan:
					return
				default:
					c.reconnectChan <- struct{}{}
				}
			} else {
				backoff = 1 * time.Second // 重置退避時間
			}
		}
	}
}

func (c *WSClient) connect() error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if c.isConnected {
		return nil
	}

	dialer := websocket.DefaultDialer
	dialer.HandshakeTimeout = 10 * time.Second

	conn, _, err := dialer.Dial(c.url, nil)
	if err != nil {
		return err
	}

	c.conn = conn
	c.isConnected = true

	// 設置 ping 處理
	c.conn.SetPingHandler(func(data string) error {
		c.conn.WriteControl(websocket.PongMessage, []byte(data), time.Now().Add(5*time.Second))
		return nil
	})

	// 設置關閉處理
	c.conn.SetCloseHandler(func(code int, text string) error {
		logs.Debug("連接關閉: %d %s", code, text)
		c.triggerReconnect()
		return nil
	})

	// 啟動讀取循環
	c.wg.Add(1)
	go func() {
		defer c.wg.Done()
		c.readLoop()
	}()

	// 啟動心跳檢測
	c.wg.Add(1)
	go func() {
		defer c.wg.Done()
		c.heartbeat()
	}()

	logs.Debug("WebSocket 連接成功")
	return nil
}

func (c *WSClient) disconnect() {
	c.mu.Lock()
	defer c.mu.Unlock()

	if !c.isConnected {
		return
	}

	// 嘗試發送關閉消息，但設置較短的超時
	c.conn.SetWriteDeadline(time.Now().Add(1 * time.Second))
	c.conn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, ""))
	c.conn.Close()
	c.isConnected = false
	c.conn = nil
}

func (c *WSClient) readLoop() {
	for {
		// 檢查是否已停止
		select {
		case <-c.stopChan:
			return
		default:
		}

		c.mu.Lock()
		conn := c.conn
		c.mu.Unlock()

		if conn == nil {
			return
		}

		_, message, err := conn.ReadMessage()
		if err != nil {
			// 檢查是否是因為客戶端停止而關閉
			select {
			case <-c.stopChan:
				return
			default:
				logs.Debug("讀取錯誤: %v", err)
				c.triggerReconnect()
				return
			}
		}

		if c.messageHandler != nil {
			c.messageHandler(message)
		}
	}
}

func (c *WSClient) heartbeat() {
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-c.stopChan:
			return
		case <-ticker.C:
			c.mu.Lock()
			if !c.isConnected || c.conn == nil {
				c.mu.Unlock()
				return
			}

			err := c.conn.WriteControl(websocket.PingMessage, []byte{}, time.Now().Add(5*time.Second))
			c.mu.Unlock()

			if err != nil {
				logs.Debug("心跳檢測失敗: %v", err)
				c.triggerReconnect()
				return
			}
		}
	}
}

func (c *WSClient) triggerReconnect() {
	// 檢查是否已停止
	select {
	case <-c.stopChan:
		return
	default:
	}

	c.mu.Lock()
	if c.isConnected {
		c.isConnected = false
		if c.conn != nil {
			c.conn.Close()
			c.conn = nil
		}
	}
	c.mu.Unlock()

	// 非阻塞方式觸發重連
	select {
	case c.reconnectChan <- struct{}{}:
	default:
	}
}

// 發送消息的方法
func (c *WSClient) SendMessage(message []byte) error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if !c.isConnected || c.conn == nil {
		return ErrWebSocketConnectionClosed
	}

	return c.conn.WriteMessage(websocket.TextMessage, message)
}

func (c *WSClient) ReadJSON(v interface{}) error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if !c.isConnected || c.conn == nil {
		return ErrWebSocketConnectionClosed
	}

	return c.conn.ReadJSON(v)
}

func (c *WSClient) ReadMessage() (messageType int, p []byte, err error) {
	c.mu.Lock()
	defer c.mu.Unlock()

	if !c.isConnected || c.conn == nil {
		return 0, nil, ErrWebSocketConnectionClosed
	}

	return c.conn.ReadMessage()
}

func (c *WSClient) WriteJSON(v interface{}) error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if !c.isConnected || c.conn == nil {
		return ErrWebSocketConnectionClosed
	}

	return c.conn.WriteJSON(v)
}

func (c *WSClient) WriteMessage(messageType int, data []byte) error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if !c.isConnected || c.conn == nil {
		return ErrWebSocketConnectionClosed
	}

	return c.conn.WriteMessage(messageType, data)
}

// 使用示例
func main() {
	client := NewWSClient("wss://example.com/ws", func(msg []byte) {
		logs.Debug("收到消息: %s", string(msg))
	})

	// 轉型為 *WSClient 後啟動
	wsClient := client.(*WSClient)
	wsClient.Start()

	// 程序運行中...
	time.Sleep(5 * time.Minute)

	// 當需要關閉時
	wsClient.Close()
}
